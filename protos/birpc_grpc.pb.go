// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: protos/birpc.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BiRPC_RegisterAgent_FullMethodName = "/BiRPC/RegisterAgent"
)

// BiRPCClient is the client API for BiRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiRPCClient interface {
	RegisterAgent(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterRequest, RegisterResponse], error)
}

type biRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewBiRPCClient(cc grpc.ClientConnInterface) BiRPCClient {
	return &biRPCClient{cc}
}

func (c *biRPCClient) RegisterAgent(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterRequest, RegisterResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BiRPC_ServiceDesc.Streams[0], BiRPC_RegisterAgent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RegisterRequest, RegisterResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BiRPC_RegisterAgentClient = grpc.BidiStreamingClient[RegisterRequest, RegisterResponse]

// BiRPCServer is the server API for BiRPC service.
// All implementations must embed UnimplementedBiRPCServer
// for forward compatibility.
type BiRPCServer interface {
	RegisterAgent(grpc.BidiStreamingServer[RegisterRequest, RegisterResponse]) error
	mustEmbedUnimplementedBiRPCServer()
}

// UnimplementedBiRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBiRPCServer struct{}

func (UnimplementedBiRPCServer) RegisterAgent(grpc.BidiStreamingServer[RegisterRequest, RegisterResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedBiRPCServer) mustEmbedUnimplementedBiRPCServer() {}
func (UnimplementedBiRPCServer) testEmbeddedByValue()               {}

// UnsafeBiRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiRPCServer will
// result in compilation errors.
type UnsafeBiRPCServer interface {
	mustEmbedUnimplementedBiRPCServer()
}

func RegisterBiRPCServer(s grpc.ServiceRegistrar, srv BiRPCServer) {
	// If the following call pancis, it indicates UnimplementedBiRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BiRPC_ServiceDesc, srv)
}

func _BiRPC_RegisterAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiRPCServer).RegisterAgent(&grpc.GenericServerStream[RegisterRequest, RegisterResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BiRPC_RegisterAgentServer = grpc.BidiStreamingServer[RegisterRequest, RegisterResponse]

// BiRPC_ServiceDesc is the grpc.ServiceDesc for BiRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BiRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BiRPC",
	HandlerType: (*BiRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterAgent",
			Handler:       _BiRPC_RegisterAgent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/birpc.proto",
}
